#+Title: HWK 9
#+Subtitle: Due Tuesday November 24th, 6p.m.
#+Author: Jeffery Zucker
#+Options: num:nil
#+Description: Homework 9
#+SETUPFILE: ./org-html-themes/setup/theme-readtheorg-local.setup

* (1)
:PROPERTIES:
:CUSTOM_ID: (1)
:END:

Page 8-8, exercises 2(a) and 2(b).

* (2)
:PROPERTIES:
:CUSTOM_ID: (2)
:END:

Page 10-10, Exercises 1, 2, and 4.

* Hints
:PROPERTIES:
:CUSTOM_ID: Hints
:END:

As this homework was not discussed in the tutorial,
some hints are included here (as of November 23rd.)

** (1)
:PROPERTIES:
:CUSTOM_ID: (1)
:END:

*** (a)

For part (a), recall that a PR-derivation is
#+begin_quote
‚Ä¶ a sequence of labelled functions symbols of the form
#+begin_center
#+begin_src text
f‚ÇÅ ‚Üê L‚ÇÅ
f‚ÇÇ ‚Üê L‚ÇÇ
 ‚ãÆ
f‚Çô ‚Üê L‚Çô
#+end_src
#+end_center
where each ~L·µ¢~ is either
- the name of an initial function,
- a list $f_{j}, f_{k_{1}}, ‚Ä¶, f_{k_{‚Ñì}}$ followed by the note ~(compos : ‚Ñì, m)~,
- a pair $f_{j}, f_{k}$ with a note ~(rec : m)~, or
- a pair $c, f_{k}$ (where ~c~ is a constant number) with a not ~(rec : 0)~.
#+end_quote
This is from page 4-2 of the notes, which is a bit more detailed.

Now since we have a method of enumerating sequences,
the main task here is enumerating the set of labels (the ~L·µ¢~.)

*** (b)

For part (b), either sketch a definition of the universal function,
or present a diagonalisation argument which shows it cannot exist.

** (2)

*** Exercise 1

The difficulty here is that we really only have the
basic commands to define loop programs: assignment of zero,
assignment of another variable, increment, skip,
and the loop.

Do make sure that you don't make use of predecessor or subtraction
anywhere in your definition.

For an actual hint, suppose our input value is ~X~.
If your program loops ~X~ times,
each time incrementing the output variable ~Y~,
except not doing so just /once/, then you will have defined
the predecessor program.

*** Exercise 2

Examine what was needed to define the classes /PR(gs)/ and /ùí¢-COMP(gs)/.
Defining /‚Ñí-COMP(gs)/ will be similar.

Then you need to check the proof of /‚Ñí-COMP/ = /PR/ to see
what additional cases may be needed.

*** Exercise 4

We have already shown that this is true for functions.

Remember that a set is called /PR/ or /ùí¢-COMP/ if its
characteristic predicate is. So this is really asking:
find a set whose characteristic predicate is ùí¢-computable,
but not /PR/.
